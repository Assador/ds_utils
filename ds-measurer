#!/usr/bin/perl
#
#  ds-measurer, v1.0, GTK+
#  Copyright ¬© 2016 Dmitry Sokolov
#
#  This file is part of ds-measurer.
#
#  ds-measurer is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  ds-measurer is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with ds-measurer.  If not, see <http://www.gnu.org/licenses/>.
#
#  –°–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ ‚Äî —à–∏—Ä–∏–Ω—ã, –≤—ã—Å–æ—Ç—ã, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
#  –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–µ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏—è, —É–≥–ª–∞ –∏ –¥–ª–∏–Ω—ã –æ—Ç—Ä–µ–∑–∫–∞ –º–µ–∂–¥—É –Ω–∏–º–∏.
#  –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ: –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–º —Å–ª–æ–µ –ø–æ–≤–µ—Ä—Ö
#  —Ç–µ–∫—É—â–µ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞ –≤—ã–≤–æ–¥—è—Ç—Å—è –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ –ª–∏–Ω–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
#  –∏ —Ç–µ–∫—É—â–∏–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∫–ª—é—á—ë–Ω–Ω—ã–π –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–≤–æ–¥–∞.
#  –í –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
#  –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –∏/–∏–ª–∏ —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ, —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ —Ç–µ–∫—É—â–∏–µ —á–∏—Å–ª–æ–≤—ã–µ
#  –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è, –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏–∑ —Ü–µ–Ω—Ç—Ä–∞, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å
#  –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–∞–∫–∏–º-–ª–∏–±–æ –∏–∑ –∑–∞–¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω, –≤–∫–ª—é—á–∞—Ç—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
#  –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ (—Ü–µ–Ω—Ç—Ä–æ–≤—ã–µ, –∑–æ–ª–æ—Ç–æ–≥–æ —Å–µ—á–µ–Ω–∏—è, –¥–∏–∞–≥–æ–Ω–∞–ª—å), –º–µ–Ω—è—Ç—å –∏—Ö —Ü–≤–µ—Ç–∞ –∏ –¥—Ä.
#  –°–æ —Å–∫—Ä–∏–ø—Ç–æ–º –ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ YAML, –≤ –∫–æ—Ç–æ—Ä–æ–º
#  –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–≤–µ—Ç–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏, —Å–æ—á–µ—Ç–∞–Ω–∏—è –∫–ª–∞–≤–∏—à –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –Ω–∞–±–æ—Ä
#  —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è, —Ñ–æ—Ä–º–∞—Ç –∏ –º–∞—Å–∫—É —Ñ–∞–π–ª–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏ –¥—Ä.
#  –ü–æ–¥—Ä–æ–±–Ω–µ–µ: http://sokolov.website/programs/ds-utils/ds-measurer
#
#  –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: perl, libgtk2-perl, libmath-round-perl, libyaml-perl
#
#  –ö–ª—é—á–µ–π –Ω–µ—Ç; –∑–∞–ø—É—Å–∫: ds-measurer
#
#  Dmitry Sokolov <dmitry@scrofa-tridens.ru>

use strict;
use warnings;
use utf8;
use open qw/:encoding(UTF-8) :std/;
use Gtk2 "-init";
use POSIX qw(strftime);
use Math::Round;
use YAML;
use File::Basename;
use constant PI => 4 * atan2(1, 1);

my @cpaths = ($ENV{"HOME"} . "/.config/ds-measurer.yaml", dirname(__FILE__) . "/ds-measurer.yaml");
my $config = 0;
foreach(@cpaths) {if(-s && -f) {$config = YAML::LoadFile($_); last;}}
die "No configuration file found at:\n" . join("\n", @cpaths) . "\n" if !$config;
$config->{"screenshot"}->{"file"} =~ s/^~/$ENV{"HOME"}/;

my (@c, $cb, $cc, $state, $x0, $y0, $x1, $y1, $x0c, $y0c, $x1c, $y1c, $w, $h, $l, $a, $xr, $yr, $wr, $hr, $lr, $ar, $xt, $yt);
my @g = (0, 1, 0);
my $sf = 0; my $arm = 1;
&set_colors("default");

my $window = Gtk2::Window->new;
$window->signal_connect(destroy => sub {Gtk2->main_quit;});
$window->signal_connect(key_press_event => \&key_press);
$window->signal_connect(key_release_event => \&key_release);
$window->fullscreen;
my $da = Gtk2::DrawingArea->new;
$da->set_events([qw/exposure_mask leave-notify-mask button-press-mask button-release-mask pointer-motion-mask pointer-motion-hint-mask/]);
$da->signal_connect(expose_event => \&expose);
$da->signal_connect(button_press_event => \&button_press);
$da->signal_connect(motion_notify_event => \&draw);
$da->signal_connect(button_release_event => \&button_release);
$window->add($da);
$cb = Gtk2::Clipboard->get(Gtk2::Gdk->SELECTION_CLIPBOARD);
$window->set_colormap($window->get_screen->get_rgba_colormap);
$window->show_all;
Gtk2->main;

sub set_colors {
	my $ct = shift;
	@c = ([$config->{"colors"}->{$ct}->{"main"}->{"r"}, $config->{"colors"}->{$ct}->{"main"}->{"g"}, $config->{"colors"}->{$ct}->{"main"}->{"b"}, $config->{"colors"}->{$ct}->{"main"}->{"a"}], [$config->{"colors"}->{$ct}->{"basic"}->{"r"}, $config->{"colors"}->{$ct}->{"basic"}->{"g"}, $config->{"colors"}->{$ct}->{"basic"}->{"b"}, $config->{"colors"}->{$ct}->{"basic"}->{"a"}], [$config->{"colors"}->{$ct}->{"faded"}->{"r"}, $config->{"colors"}->{$ct}->{"faded"}->{"g"}, $config->{"colors"}->{$ct}->{"faded"}->{"b"}, $config->{"colors"}->{$ct}->{"faded"}->{"a"}], [$config->{"colors"}->{$ct}->{"text main"}->{"r"}, $config->{"colors"}->{$ct}->{"text main"}->{"g"}, $config->{"colors"}->{$ct}->{"text main"}->{"b"}, $config->{"colors"}->{$ct}->{"text main"}->{"a"}], [$config->{"colors"}->{$ct}->{"text basic"}->{"r"}, $config->{"colors"}->{$ct}->{"text basic"}->{"g"}, $config->{"colors"}->{$ct}->{"text basic"}->{"b"}, $config->{"colors"}->{$ct}->{"text basic"}->{"a"}], [$config->{"colors"}->{$ct}->{"text faded"}->{"r"}, $config->{"colors"}->{$ct}->{"text faded"}->{"g"}, $config->{"colors"}->{$ct}->{"text faded"}->{"b"}, $config->{"colors"}->{$ct}->{"text faded"}->{"a"}]);
	return 0;
}
sub expose {
	$da->window->set_cursor(Gtk2::Gdk::Cursor::new_from_pixbuf(undef, Gtk2::Gdk::Display->get_default, Gtk2::Gdk::Pixbuf->new("rgb", 1, 8, 16, 16), 8, 8));
	&clear;
	&cursor;
	return 0;
}
sub clear {
	$cc = Gtk2::Gdk::Cairo::Context->create($da->window);
	$cc->set_operator("clear");
	$cc->paint;
	$cc->set_operator("over");
	return 0;
}
sub cursor {
	(undef, $x1, $y1, $state) = $da->window->get_pointer; $x0c = $x0; $y0c = $y0; $x1c = $x1; $y1c = $y1;
	$cc->set_line_width(1);
	$cc->set_source_rgba($c[1][0], $c[1][1], $c[1][2], $c[1][3]);
	$cc->move_to($x1 + 0.5, 0); $cc->line_to($x1 + 0.5, $window->get_screen->get_height); $cc->stroke;
	$cc->move_to(0, $y1 + 0.5); $cc->line_to($window->get_screen->get_width, $y1 + 0.5); $cc->stroke;
	return 0;
}
sub key_n2c {
	return Gtk2::Gdk::Keymap->get_entries_for_keyval(Gtk2::Gdk->keyval_from_name(shift))->{"keycode"};
}
sub key_press {
	my (undef, $event) = @_;
	if($event->hardware_keycode == key_n2c($config->{"shortcuts"}->{"fixed ratio"}) || $event->hardware_keycode == key_n2c($config->{"shortcuts"}->{"from center"})) {&draw(undef, $event);} # –í—ã–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ –∏ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞
	return 0;
}
sub key_release {
	my (undef, $event) = @_;
	if($event->hardware_keycode == key_n2c($config->{"shortcuts"}->{"fixed ratio"}) || $event->hardware_keycode == key_n2c($config->{"shortcuts"}->{"from center"})) {&draw(undef, $event);} # –û—Ç–º–µ–Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ä–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –∏ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞
	if($event->hardware_keycode == key_n2c($config->{"shortcuts"}->{"quit"})) {exit 0;} # –í—ã—Ö–æ–¥
	if($event->hardware_keycode == key_n2c($config->{"shortcuts"}->{"screenshot"}) && $state >= "button1-mask") {$sf = 1; &clear; Glib::Timeout->add(100, sub {&screenshot($x0c, $y0c, $w, $h); $sf = 0; &draw(undef, undef); return 0;});} # –°–∫—Ä–∏–Ω—à–æ—Ç
	if($event->hardware_keycode == key_n2c($config->{"shortcuts"}->{"segment line"})) {$g[0] = !$g[0]; &draw(undef, $event);} # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—Ä–µ–∑–æ–∫
	if($event->hardware_keycode == key_n2c($config->{"shortcuts"}->{"center lines"})) {$g[1] = !$g[1]; &draw(undef, $event);} # –õ–∏–Ω–∏–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É
	if($event->hardware_keycode == key_n2c($config->{"shortcuts"}->{"golden sections"})) {$g[2] = !$g[2]; &draw(undef, $event);} # –ó–æ–ª–æ—Ç–æ–µ —Å–µ—á–µ–Ω–∏–µ
	while(my ($key, $value) = each %{$config->{"colors shortcuts"}}) {if($event->hardware_keycode == key_n2c($value)) {&set_colors($key); &draw(undef, $event);}} # –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã
	while(my ($key, $value) = each %{$config->{"aspect ratio shortcuts"}}) {if($event->hardware_keycode == key_n2c($value)) {$arm = eval($key); &draw(undef, $event);}} # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
	return 0;
}
sub screenshot {
	my ($xs, $ys, $ws, $hs) = @_;
	my $ss = Gtk2::Gdk::Pixbuf->new("rgb", 0, 8, $ws, $hs);
	$ss->get_from_drawable(Gtk2::Gdk->get_default_root_window, Gtk2::Gdk::Colormap->get_system, $xs, $ys, 0, 0, $ws, $hs);
	if($config->{"screenshot"}->{"target"} eq "both" || $config->{"screenshot"}->{"target"} eq "file") {
		eval {$ss->save(strftime($config->{"screenshot"}->{"file"}, localtime), $config->{"screenshot"}->{"format"});} or print $@;
	}
	if($config->{"screenshot"}->{"target"} eq "both" || $config->{"screenshot"}->{"target"} eq "clipboard") {
		$cb->set_image($ss);
	}
	return 0;
}
sub button_press {
	my (undef, $event) = @_;
	if($event->button == 1) {
		($x0, $y0) = $event->coords; $x0c = $x0; $y0c = $y0; $x1c = $x1; $y1c = $y1;
	}
	if($event->button == 3 && $state >= "button1-mask") {
		$cb->set_text("‚§¢¬†$w¬†‚®Ø¬†$h | ùÑ©¬†$lr | ‚¶ü¬†$ar¬∞ | ‚á±¬†($x0c,¬†$y0c) | ‚á≤¬†($x1c,¬†$y1c)");
	}
	return 0;
}
sub button_release {
	my (undef, $event) = @_;
	if($event->button == 1) {
		&clear;
		&cursor;
	}
	return 0;
}
sub draw {
	if(!$sf) {
		my (undef, $event) = @_;
		if(!defined($event) || $event->type eq "motion-notify" && $event->is_hint || $event->type eq "key-press" || $event->type eq "key-release") {
			&clear;
			if($state >= "button1-mask") {
				(undef, $x1, $y1, $state) = $da->window->get_pointer; $x0c = $x0; $y0c = $y0; $x1c = $x1; $y1c = $y1;
				# –í—ã–¥–µ–ª–µ–Ω–∏–µ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞
				if($state >= "control-mask") {$x0c = $x0 * 2 - $x1; $y0c = $y0 * 2 - $y1;};
				# –í—ã–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ
				if($state >= "shift-mask") {
					if(abs $x1 - $x0 >= abs $y1 - $y0) {
						$x1c = $x0 + round($arm * ($x1 - $x0 >= 0 ? (abs $y1 - $y0) : (0 - abs $y1 - $y0)));
						$x0c = $x0 - round($arm * ($x1 - $x0 >= 0 ? (abs $y1 - $y0) : (0 - abs $y1 - $y0))) if $state >= "control-mask";
					} else {
						$y1c = $y0 + round($arm * ($y1 - $y0 >= 0 ? (abs $x1 - $x0) : (0 - abs $x1 - $x0)));
						$y0c = $y0 - round($arm * ($y1 - $y0 >= 0 ? (abs $x1 - $x0) : (0 - abs $x1 - $x0))) if $state >= "control-mask";
					}
				};
				# –†–∞—Å—á—ë—Ç —à–∏—Ä–∏–Ω—ã, –≤—ã—Å–æ—Ç—ã, –¥–ª–∏–Ω—ã, —É–≥–ª–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—Ä–∏—Å–æ–≤–∫–∏
				($w, $h) = (abs $x1c - $x0c, abs $y1c - $y0c);
				($l, $a) = (($w ** 2 + $h ** 2) ** 0.5, atan2($h, $w));
				($xr, $yr, $wr, $hr) = ($x0c + 0.5, $y0c + 0.5, $x1c - $x0c >= 0 ? ($x1c - $x0c - 1) : ($x1c - $x0c + 1), $y1c - $y0c >= 0 ? ($y1c - $y0c - 1) : ($y1c - $y0c + 1));
				$lr = round($l); $ar = nearest(0.01, $a * 180 / PI); $ar =~ s/,/\./;
				# –ö—É—Ä—Å–æ—Ä
				$cc->set_line_width(1);
				$cc->set_source_rgba($c[1][0], $c[1][1], $c[1][2], $c[1][3]);
				$cc->move_to($x1 - $x0 >= 0 ? ($x1 - 0.5) : ($x1 + 1.5), 0);
				$cc->line_to($x1 - $x0 >= 0 ? ($x1 - 0.5) : ($x1 + 1.5), $window->get_screen->get_height);
				$cc->stroke;
				$cc->move_to(0, $y1 - $y0 >= 0 ? ($y1 - 0.5) : ($y1 + 1.5));
				$cc->line_to($window->get_screen->get_width, $y1 - $y0 >= 0 ? ($y1 - 0.5) : ($y1 + 1.5));
				$cc->stroke;
				# –£–≥–æ–ª
				if($g[0] && $w > 25) {
					$cc->set_source_rgba($c[1][0], $c[1][1], $c[1][2], $c[1][3]);
					$cc->arc($xr, $yr, 25, 0, $a) if $x1c - $x0c >= 0 && $y1c - $y0c >= 0;
					$cc->arc($xr, $yr, 25, PI * 2 - $a, 0) if $x1c - $x0c >= 0 && $y1c - $y0c < 0;
					$cc->arc($xr, $yr, 25, PI, PI + $a) if $x1c - $x0c < 0 && $y1c - $y0c < 0;
					$cc->arc($xr, $yr, 25, PI - $a, PI) if $x1c - $x0c < 0 && $y1c - $y0c >= 0;
					$cc->stroke;
				}
				# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
				$cc->set_source_rgba($c[1][0], $c[1][1], $c[1][2], $c[1][3]);
				$cc->rectangle($xr, $yr, $wr, $hr);
				$cc->stroke;
				# –õ–∏–Ω–∏–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É
				if($g[1]) {
					$cc->move_to($xr + int $wr / 2, $yr);
					$cc->line_to($xr + int $wr / 2, $yr + $hr);
					$cc->move_to($xr, $yr + int $hr / 2);
					$cc->line_to($xr + $wr, $yr + int $hr / 2);
					$cc->stroke;
				}
				# –ó–æ–ª–æ—Ç–æ–µ —Å–µ—á–µ–Ω–∏–µ
				if($g[2]) {
					$cc->move_to($xr + int $wr * 0.382, $yr);
					$cc->line_to($xr + int $wr * 0.382, $yr + $hr);
					$cc->move_to($xr, $yr + int $hr * 0.382);
					$cc->line_to($xr + $wr, $yr + int $hr * 0.382);
					$cc->move_to($xr + int $wr * 0.618, $yr);
					$cc->line_to($xr + int $wr * 0.618, $yr + $hr);
					$cc->move_to($xr, $yr + int $hr * 0.618);
					$cc->line_to($xr + $wr, $yr + int $hr * 0.618);
					$cc->stroke;
				}
				# –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—Ä–µ–∑–æ–∫
				if($g[0]) {
					$cc->set_source_rgba($c[0][0], $c[0][1], $c[0][2], $c[0][3]);
					$cc->move_to($xr, $yr);
					$cc->line_to($xr + $wr, $yr + $hr);
					$cc->stroke;
				}
				# –¢–µ–∫—Å—Ç
				my ($tt, $te);
				$cc->set_source_rgba($c[4][0], $c[4][1], $c[4][2], $c[4][3]);
				$cc->select_font_face("sans", "normal", "normal");
				$cc->set_font_size(11);
				my @pp = (3, 4, 5);
				# –¢–µ–∫—Å—Ç, —à–∏—Ä–∏–Ω–∞
				$tt = $w; $te = $cc->text_extents($tt);
				$cc->move_to($xr + $wr / 2 - $te->{"width"} / 2, $yr + $hr - ($y1c - $y0c >= 0 ? (0 - $te->{"height"} - $pp[1]) : $pp[2]));
				$cc->show_text($tt);
				# –¢–µ–∫—Å—Ç, –≤—ã—Å–æ—Ç–∞
				$tt = $h; $te = $cc->text_extents($tt);
				$cc->move_to($xr + $wr + ($x1c - $x0c >= 0 ? $pp[0] : (0 - $te->{"width"} - $pp[1])), $yr + $hr / 2 + $te->{"height"} / 2);
				$cc->show_text($tt);
				# –¢–µ–∫—Å—Ç, —É–≥–æ–ª
				if($g[0]) {
					$tt = "$ar¬∞"; $te = $cc->text_extents($tt);
					$cc->move_to($xr + ($x1c - $x0c >= 0 ? $pp[0] : (0 - $te->{"width"} - $pp[1])), $yr - ($y1c - $y0c >= 0 ? $pp[2] : (0 - $te->{"height"} - $pp[1])));
					$cc->show_text($tt);
				}
				# –¢–µ–∫—Å—Ç, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª—å–Ω—ã–µ
				$cc->set_source_rgba($c[5][0], $c[5][1], $c[5][2], $c[5][3]);
				$tt = "($x0c, $y0c)"; $te = $cc->text_extents($tt);
				$cc->move_to($xr + ($x1c - $x0c >= 0 ? (0 - $te->{"width"} - $pp[1]) : $pp[0]), $yr - ($y1c - $y0c >= 0 ? $pp[2] : (0 - $te->{"height"} - $pp[1])));
				$cc->show_text($tt);
				# –¢–µ–∫—Å—Ç, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–∫—É—â–∏–µ
				$cc->set_source_rgba($c[3][0], $c[3][1], $c[3][2], $c[3][3]);
				$tt = "($x1c, $y1c)"; $te = $cc->text_extents($tt);
				$cc->move_to($xr + $wr + ($x1c - $x0c >= 0 ? $pp[0] : (0 - $te->{"width"} - $pp[1])), $yr + $hr - ($y1c - $y0c >= 0 ? (0 - $te->{"height"} - $pp[1]) : $pp[2]));
				$cc->show_text($tt);
				# –¢–µ–∫—Å—Ç, –¥–ª–∏–Ω–∞
				if($g[0] && $w > 55 && $h > 31) {
					$cc->set_source_rgba($c[3][0], $c[3][1], $c[3][2], $c[3][3]);
					$tt = "$lr"; $te = $cc->text_extents($tt);
					$cc->move_to($xr + $wr / 2 + ($x1c - $x0c >= 0 ? $pp[0] : (0 - $te->{"width"} - $pp[1])), $yr + $hr / 2 - ($y1c - $y0c >= 0 ? $pp[2] : (0 - $te->{"height"} - $pp[1])));
					$cc->show_text($tt);
				}
			} else {
				&cursor;
			}
		}
	}
	return 0;
}
exit 0;
